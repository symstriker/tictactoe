<html>
<head>
    <title>About me</title>
    <style>
        body {
            background-color: #f5f5f5;
            padding-bottom: 40px;
            padding-top: 40px;
        }
        .container {
            margin-right: auto;
            margin-left: auto;
            width: 940px;
        }
        .aboutme-box {
            padding: 20px 20px 20px;
            margin: 0 auto 20px;
            background-color: #fff;
            border: 1px solid #005580;
            -webkit-border-radius: 5px;
            -moz-border-radius: 5px;
            border-radius: 5px;
            -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.05);
            -moz-box-shadow: 0 1px 2px rgba(0,0,0,.05);
            box-shadow: 0 1px 2px rgba(0,0,0,.05);
        }
        
        .chapter {
            text-indent: 30px;
        }

        .center {
            text-align: center;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="aboutme-box">
        <div id="top"></div>
        <div id="menu">
            <ul>
                <li><a href="#about">About me</a></li>
                <li><a href="#work-experience">About my work experience</a></li>
                <li><a href="#used-technologies">Technologies used by me</a></li>
                <li><a href="#hobbies">Hobbies</a></li>
                <li><a href="#my-future">My future</a></li>
                <li><a href="#why-i-like-project">Why i like your project very much</a></li>
                <li><a href="#motivations">Job motivations</a></li>
                <li><a href="#leadership">Answer for a leadership question</a></li>
                <li><a href="#personal-strengths">Personal Strengths</a></li>
                <li><a href="#why-quit-job">Why did you quit the last job?</a></li>
                <li><a href="#why-we-hire-you">Why do you think we should hire you?</a></li>
            </ul>
            <p id="PHP">PHP questions</p>
            <ul>
                <li><a href="#mvc">MVC</a></li>
                <li><a href="#patterns">Patterns</a></li>
                <li><a href="#solid">SOLID</a></li>
                <li><a href="#mysql">MYSQL</a></li>
                <li><a href="#rest">REST</a></li>
                <li><a href="#oop">OOP (Encapsulation, Polymorphism, Inheritance, Abstraction)</a></li>
            </ul>
        </div>

        <h1 class="center">Yevhen Straihorodskyi</h1>
        <h3 id="about">About me</h3>
        <div class="chapter">
             <p>As you can see in my CV I have about 4 years of experience in developing software with PHP.</p>
             <p>
                 I have a bachelor degree in Software Engineering and trying my best to reach my own goal - self-employing on my own project in the future.
                 As for now - I don't have enough resources to do that.
                 I'm married. I have no many friends, but they are really good friends.
                 That's why i'm passioning with other projects like yours.
                 I am really excited with your project, and i hope i can be useful for the team.
             </p>
        </div>
        <a href="#top">top</a>
        <h3 id="work-experience">About my work experience and skills</h3>
        <div class="chapter">
            <p>
                Well, I worked a lot in different companies and i think i got a lot of experience.
                At my first place of work as Software Engineer i was doing simplest things like: fixing bugs,
                finding out how to be a team player, organizing my work. Also i was training in my PHP and MySQL skills,
                learning some staffs with javascript, JQuery, CSS, HTML and so on. I got some practical knowledge about Kohana and
                CodeIgniter frameworks.
            </p>
            <p>
                At my second place of work in my area of responsibility were different tasks and projects like:
                developing and supporting price managing system depending on data of contestants with Symfony 2 from scratch. Also it was my first experience with Symfony 2.
                Later we have built another warehouse project using Symfony 2 framework and i liked this framework very much.
                Also i was solving problems with partner earning project (it was CRM system + partner program in eCommerce sphere),
                for example: optimizing price-building processes for the client's stores, optimizing shop-engines and so on.
                Also i had some free courses in Java EE. So, I found out that Symfony 2 was built by Java EE principles. It was a very good experience.
            </p>
            <p>
                At last i got a new offer from other company who worked primarily with Symfony 2. It was the great opportunity for me to improve myself.
                I was excited with automation testing what they did, especially TDD approach. I learned a lot from my colleagues.
                I was learning some staffs about Memcache, REST and so on.
                I worked at admin program for managing calculations, reports, users management.
                Also i worked with user oriented websites.

            </p>
        </div>
        <a href="#top">top</a>
        <h3 id="used-technologies">Technologies used by me</h3>
        <div class="chapter">
            <p>
                PHP 5, MySQL, SQLite, HTML, CSS, Javascript, JQuery, Ajax, Symfony 2, Doctrine, Silex, SVN, GIT, Apache, TDD, PHPUnit, TWIG, Smarty...
            </p>
        </div>
        <a href="#top">top</a>
        <h3 id="hobbies">Hobbies</h3>
        <div class="chapter">
            <p>
                Computer science.
                Sports like formula 1, carting, billiard, run, swim.
                Woodworking.
            </p>
        </div>
        <a href="#top">top</a>
        <h3 id="my-future">My future</h3>
        <div class="chapter">
            Like a said - self-employing.
        </div>
        <a href="#top">top</a>
        <h3 id="why-i-like-project">Why i like your project very much</h3>
        <div class="chapter">
            That's because i like the sphere of your product. It gives an opportunity to reach something new in my life.
        </div>
        <a href="#top">top</a>
        <h3 id="motivations">Job motivations</h3>
        <div class="chapter">
            Interesting tasks, challenging, professional growth.
        </div>
        <a href="#top">top</a>
        <h3 id="leadership">Answer for a leadership question</h3>
        <div class="chapter">
            I'd like to become a team-lead, but for now i need to work on my personal leadership quality skills like delicacy and my english as so.
        </div>
        <a href="#top">top</a>
        <h3 id="personal-strengths">Personal strengths</h3>
        <div class="chapter">
            Self-motivated,
            Good team player,
            Accommodating
        </div>
        <a href="#top">top</a>
        <h3 id="why-quit-job">Why did you quit the last job?</h3>
        <div class="chapter">
            The company has a difficult times and delaying the salary very often.
        </div>
        <a href="#top">top</a>
        <h3 id="why-we-hire-you">Why do you think we should hire you?</h3>
        <div class="chapter">
            Less words - more actions. I enjoying write a good and flexible code. It's my passion. That's what i'm doing.
        </div>
        <a href="#top">top</a>

        <h3 id="mvc"></h3>
        <div class="chapter">
            <p>
                MVC is the design pattern and methodology created to minimize dependencies between parts of program
                to make program modification mach easier.
            </p>

            <p>There is a model, that takes responsibility to organize business logic.</p>
            <p>View just represents some data for the users and takes input info from users and transfers it to the model.</p>
            <p>And Controller to solve communication between model and view</p>
        </div>
        <a href="#top">top</a>

        <h3 id="patterns">Patterns</h3>
        <div class="chapter">
            There is a lot of patterns of OOD, and the most famous of them are:
            <p>Observer - interface that implements for automatic updates of objects in one-to-many relations</p>
            <p>Mediator - interface that implements for automatic updates of objects in many-to-many relations</p>
            <p>Abstract factory is an interface that implements to create groups of many referenced/depended objects without representation of exact class. </p>
            <p>Factory method implements an interface to create an object in subclasses, and they deciding which class must be instantiated.</p>
            <p>State solves the request according to some state parameter.</p>
            <p>Strategy is an interface for changing the algorithm encapsulated from it's clients.</p>
            <p>Interpreter interface switches language syntax and it's own interpreter according to the client's context.</p>
            <p>Composite uses to build hierarchy of root-children-leaf objects. All of the objects are implementing the root interface,
                to make access to the tree leafs exact the same as to the root.</p>
            <p>Builder</p>
            <p>Singleton</p>
        </div>
        <a href="#top">top</a>

        <h3 id="solid">SOLID
        </h3>
        <div class="chapter">
            Single responsibility, Open/closed principle, Barbara Liskov substitution principle, interface segregation, dependency inversion

        </div>
        <a href="#top">top</a>

        <h3 id="mysql"></h3>
        <div class="chapter">
            Различия между майисам и иннодб
            <p>1. Майисам
            * Майисам не поддерживает транзакционность и блокировку на уровне строк что замедляет апдейт и делит
            (т.е. допускается только одна операция апдейт или делит на таблицу одновременно)
            * Дает большую скорость на инсертах селектах
            * Преимущества - поддержка полнотекстового поиска, компрессия
            Под хранение таблиц используются два файла для кранения данных и индексов.</p>

            <p>2. Иннодб был создан для обработки транзакций.</p>
            <p>* переимущества - блокировки на уровне строки (на уровне таблиц тоже есть при использовании автоинкремента), использование внешних ключей
            (начиная с 5.6.4. доступен полнотекстовый поиск)</p>
            <p><strong>3. Индексы</strong></p>
            <p>
                Преимущество использования индексов очевидно - запросы выполняются намного быстрее. Но если нам предположительно
                нужно выбрать большинство записей таблицы, то лучше это делать без индексов.
                Индексы нежелательно использовать на всех колонках таблиц так как это приведет к разрастанию размеров таблицы и как следствие -
                значительное снижение производительности при выборки из таблицы с большим количеством данных.


            </p>
            <p>Типы индексов: primary - , unique, foreign, key, fulltext</p>
        </div>
        <a href="#top">top</a>

        <h3 id="rest"></h3>
        <div class="chapter">
        </div>
        <a href="#top">top</a>

        <h3 id="oop"></h3>
        <div class="chapter">
        </div>
        <a href="#top">top</a>

        <div class="chapter">
            <p>1. Design patterns</p>
            <p>1. Цепочка обязанностей - Chain of responsibility
            Избегает связывание отправителя запроса с реализацией обработчика запроса.
            Т.е. существует интерфейс хендлера, на основе которого создаются конкретные хендлеры входных данных запроса
            </p>
            <p>2. Наблюдатель - Observer
            Определяет зависимость объектов один ко многим так, что когда один объект меняет свое сотояние,
            все объекты оповещаются и обновляются автоматом.
            Обычно учавствуют классы:
            Observerable - интерфейс, определяющий методы для добавления, удаления и оповещения наблюдателей
            Observer - интерфейс с пом которого наблюдатель получает оповещения и обрабатывает их
            ConcreteObservable - клас реализующий обсерверабл
            ConcreteObserver - класс, реализующий наблюдателя
            Пример (ивент диспетчер компонент)
            </p>
            <p>3. Состояние - State
            Позволяет объекту менять свое поведение в зависимости от состояния
            Добустим есть объект реквест, если его какой-то свойство рассмотреть как переключатель состояния,
            то в зависимости от значения свойства будет изменено поведение
            Пирмер: роутинг
            </p>
            <p>4. Интерпретатор
            В зависимости от контекста клиента определяет представление грамматики языка и интерпретатор представления
            для обработки выражений языка
            </p>
            <p>5. Стратеджи - Стратегия
            Позволяет изменять алгоритм независимо от клиентов которые его используют. Определяет группу алгоритмов инкапсулирует
            их в объектах и делает их взаимозаменяемыми.
            </p>
            <p>6. Композит или компоновщик
            Компонует объекты в древовидную структуру в виде иерархии.
            Позволяет использовать все элементы иерархии одинаково используя один интерфейс.
            Клас композит - составной класс унаследованый от компонента, определяет поведение абстрактного
            компонента у которого есть потомки (реализует абстрактные методы компонента)
            Компонент абстрактный класс, объявляющик интерфейс для компонуемых объектов.
            Объявляет интерфейс доступа к руту и к потомкам.
            </p>
            <p>6 Фабричный метод
            Определяет интерфейс для создания объекта, но позволяет реализуемым подклассам решать какой класс инстанциировать
            Управление передается в реализуемые криейторы
            </p>
            <p>7. Абстрактная фабрика
            Предоставляет интерфейс для создания групп связанных или зависимых объектов не указывая их конкретный класс
            </p>
            <p>8. Строитель използуется для инкапсуляции логики создания сложного объекта.
            Например при использовании фабрики мы можем в том или ином случае указать какой строитель использовать
            </p>
            <p>2. SOLID
            Расшифровка -
            1. Сингл респансибилити - на каждый класс должна біть возложена одна единственная обязанность
            2. Опен клосед принцип - программные сущности должны быть открыты для расширения и закрыты для изменения
            3. Принцип подстановки Барбары Лисков - вещает о том что если класс одного типа является подтипом другого
            то мы можем заместить тип подтипом при использвании.
            4. Интерфейс сегрегейшн (разделение интерфейса) - много специализированніх интерфейсов лучше чем один универсальній.
            5. Принцип инверсии зависимости - что по сути есть композиция. Уменьшает связанность.
            условия: 1. абстракции не должны зависеть от деталей, детали должны зависеть от абстракций.
            2. Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа должны зависеть от абстракций
            Он вещает о том что используя интерфейс мы можем избежать танцев с бубнов при изменении логики обработки сущности.
            </p>
            <p>3. Мускуль
            Различия между майисам и иннодб
            1. Майисам
            * Майисам не поддерживает транзакционность и блокировку на уровне строк что замедляет апдейт и делит
            (т.е. допускается только одна операция апдейт или делит на таблицу одновременно)
            * Дает большую скорость на инсертах селектах
            * Преимущества - поддержка полнотекстового поиска, компрессия
            Под хранение таблиц используются два файла для кранения данных и индексов.</p>

            <p>2. Иннодб был создан для обработки транзакций.</p>
            * переимущества - блокировки на уровне строки (на уровне таблиц тоже есть при использовании автоинкремента), использование внешних ключей
            (начиная с 5.6.4. доступен полнотекстовый поиск)</p>
            <p>3. Индексы</p>
        </div>
    </div>
</div>
</body>
</html>